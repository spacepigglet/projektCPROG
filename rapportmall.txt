CPROG Rapport för Programmeringsprojektet
[Gruppnummer: 33 ]
[Gruppmedlemmar: Anamda Sjöberg och Jessica Borg  (namn och personnummer för varje medlem)]

Skriv en kortfattad instruktion för hur programmeringsprojektet skall byggas och testas, vilka krav som måste vara uppfyllda, 
sökvägar till resursfiler(bildfiler/ljudfiler/typsnitt mm), samt vad en spelare förväntas göra i spelet, 
hur figurernas rörelser kontrolleras, mm.
Om avsteg gjorts från kraven på Filstruktur, så måste också detta motiveras och beskrivas i rapporten.

För att bygga och testa detta programmeringsprojekt, måste följande krav vara uppfyllda:
- Version av C++: C++17

- En installation av SDL- och SDL2-bibliotek på datorn, inklusive alla nödvändiga komponenter


För att bygga projektet:
1. Öppna projektet i den valda programmeringsmiljön.
2. Konfigurera projektet för att inkludera SDL-biblioteken och sökvägarna till resursfilerna.
(innebär att man måste göra några inställningar i projektets konfigurationsfiler för att göra det möjligt för kompilatorn 
att hitta och använda SDL-biblioteken samt sökvägar till projektets resursfiler (bilder, ljud, typsnitt etc.))
3. Skriv in kommandot: "make" i terminalen, då utförs det som står i Makefile
4. Skriva in kommandot: "./build/debug/play.exe (BUILD_DIR/OBJ_NAME i Makefile)


En spelare förväntas göra följande i spelet:
I detta spel ska spelaren använda tangentbordet (piltangenter + SPACE) för att styra spelobjektets(??) rörelser i en värld
där skärmen hela tiden scrollar vertikalt eller horisontellt. Plattformarna scrollar tillsammans med spelet
vilket gör att du som spelare hela tiden måste vara alert på plattformarnas rörelse. 

(Ju längre tid du spelar desto snabbare
kommer spelet att scrolla, vilket gör spelet svårare och svårare...)

Uppgiften i spelet är att hela tiden hålla sig vid liv genom att hoppa mellan plattformarna och undvika
de farliga fienderna som dyker upp på plattformarna då och då. Genom att hoppa på fienderna kan du döda dem men om du 
rör vid en fiende förlorar du ett liv och när dina liv är slut förlorar du spelet. 
Om du hamnar för långt utanför skärmens höjd eller bredd förlorar du hela spelet.

Så var redo för ett äventyr ;) Var beredd på att kämpa dig genom en svår och farlig värld där 
varje hopp är en kamp för överlevnad... du duu duuuuuu!




Fyll i 'check-listan', så att du visar att du tagit hänsyn till respektive krav, skriv också en kort kommentar om på vilket sätt du/gruppen anser att kravet tillgodosetts, och/eller var i koden kravet uppfylls.

Den ifyllda Rapportmallen lämnas in tillsammans med Programmeringsprojektet. Spara rapporten som en PDF med namnet CPROG_RAPPORT_GRUPP_NR.pdf (där NR är gruppnumret).

1.	Beskrivning
Spelmotor:
Ett plattformsspel, likt icy tower, där plattformarna genereras allt eftersom bilden rör sig uppåt.där spelaren kontrollerar figuren med tangentbord. Högerpil och vänsterpil (kanske asdw?), 
space för att hoppa. 

Förväntas göra i spelet: bilden panorerar konstant uppåt, i ökande takt och det primära målet är att hoppa uppåt.
Målet är även att undvika/döda fienden som går fram och tillbaka på vissa plattformar. Kan döda dem genom att hoppa på dem/skjuta(rakt upp). 
Kan finnas olika typer av fiender. Kan finnas fienden som kan skjuta mot spelaren och ta ett liv. 
Fienden (en annan typ) kan "frysa spelaren" om denne träffas av frys-skott.

När spelaren har hoppat x högt så når denne en ny level (måste kunna räkna/hålla koll på hur högt upp man har kommit). 

Ska kunna samla grejer(coins).

När spelaren går på/pixlarna överlappas så plockar spelaren upp det. 
(Ex går/hoppar på en jetpack = plockar upp och åker iväg. Går på coins = plocka upp)

(Kan köpa coolare sprites med coins)

Finns en highscore-lista, där både höjd och coins räknas in. (Sortera lista på coins/höjd?)
Kan skriva in namn för highscore. 

Spelimplementation:
Om spelaren blir ifatt-kommen, och hamnar ur bild (längre än en x pixlar av bilden) då förlorar den.
Spelaren kan överleva (3) skott. Spelaren blir skadad eller "fryser" om denne vidrör en fiende (undantag att hoppa på dem). 

Sprite-figur har 2 sidor, höger & vänstersida i profil.
Finns jetpack som dyker upp då och då. Den gör att spelaren flyger uppåt och igenom plattformar & fiender (kan ej skadas) i x antal sekunder.

När en ny level nås får spelaren tillbaka ett liv (om spelaren inte redan har fullt). Bakgrund ändras. Fyverkerier?


2.	Instruktion för att bygga och testa

Skriv din kommentar här…

3.	Krav på den Generella Delen(Spelmotorn)

3.1.	[ Ja/Nej/Delvis ] Programmet kodas i C++ och grafikbiblioteket SDL2 används.
Kommentar: Ja


3.2.	[ Ja/Nej/Delvis ] Objektorienterad programmering används, dvs. programmet är uppdelat i klasser och använder av oo-tekniker som inkapsling, arv och polymorfism.
Kommentar: Ja


3.3.	[ Ja/Nej/Delvis ] Tillämpningsprogrammeraren skyddas mot att använda värdesemantik för objekt av polymorfa klasser.
Kommentar: Ja


3.4.	[ Ja/Nej/Delvis ] Det finns en gemensam basklass för alla figurer(rörliga objekt), och denna basklass är förberedd för att vara en rotklass i en klasshierarki.
Kommentar: Nej inte än...


3.5.	[ Ja/Nej/Delvis ] Inkapsling: datamedlemmar är privata, om inte ange skäl.
Kommentar: tror det?? kanske några är protected (som skulle kunna vara private??) Kolla på det!


3.6.	[ Ja/Nej/Delvis ] Det finns inte något minnesläckage, dvs. jag har testat och sett till att dynamiskt allokerat minne städas bort.
Kommentar: skriv din kommentar här…


3.7.	[ Ja/Nej/Delvis ] Spelmotorn kan ta emot input (tangentbordshändelser, mushändelser) och reagera på dem enligt tillämpningsprogrammets önskemål, eller vidarebefordra dem till tillämpningens objekt.
Kommentar: Ja


3.8.	[ Ja/Nej/Delvis ] Spelmotorn har stöd för kollisionsdetektering: dvs. det går att kolla om en Sprite har kolliderat med en annan Sprite.
Kommentar: Delvis (bug för actor-platform collision. Finns inte generell kollisionsdetektering)


3.9.	[ Ja/Nej/Delvis ] Programmet är kompilerbart och körbart på en dator under både Mac, Linux och MS Windows (alltså inga plattformspecifika konstruktioner) med SDL 2 och SDL2_ttf, SDL2_image och SDL2_mixer.
Kommentar: Ja?

 
4.	Krav på den Specifika Delen(Spelet som använder sig av Spelmotorn) 

4.1.	[ Ja/Nej/Delvis ] Spelet simulerar en värld som innehåller olika typer av visuella objekt. Objekten har olika beteenden och rör sig i världen och agerar på olika sätt när de möter andra objekt.
Kommentar: Ja


4.2.	[ Ja/Nej/Delvis ] Det finns minst två olika typer av objekt, och det finns flera instanser av minst ett av dessa objekt.
Kommentar: Ja


4.3.	[ Ja/Nej/Delvis ] Figurerna kan röra sig över skärmen. 
Kommentar: Ja


4.4.	[ Ja/Nej/Delvis ] Världen (spelplanen) är tillräckligt stor för att den som spelar skall uppleva att figurerna förflyttar sig i världen.
Kommentar: Ja


4.5.	[ Ja/Nej/Delvis ] En spelare kan styra en figur, med tangentbordet eller med musen.
Kommentar: Ja


4.6.	[ Ja/Nej/Delvis ] Det händer olika saker när objekten möter varandra, de påverkar varandra på något sätt.
Kommentar: Ja? 

 
